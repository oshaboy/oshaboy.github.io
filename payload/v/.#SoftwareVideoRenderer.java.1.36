package v;

import static data.Defines.RANGECHECK;

import i.DoomStatusAware;
import i.IDoomSystem;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.IndexColorModel;

import doom.DoomStatus;

import m.BBox;
import rr.LightsAndColors;
import rr.patch_t;

public abstract class SoftwareVideoRenderer<T,V>
        implements DoomVideoRenderer<T,V>, IVideoScaleAware, DoomStatusAware{
    
    /** Light levels. Binded to the colormap subsystem */
    public static final int NUMLIGHTS=LightsAndColors.LIGHTLEVELS;
    
    /** Colormap used for static graphics (menu etc.) */
    public static final int CMAP_FIXED=0;

    protected IDoomSystem I;
    protected Image currentscreen;
    
    public Image getCurrentScreen(){
    	return currentscreen;
    }
    
    public final void updateStatus(DoomStatus<?,?> DM){
    	this.I=DM.I;
    }
    
    protected int width;
    protected int height;

    /** Each screen is [SCREENWIDTH*SCREENHEIGHT]; 
     *  This is what the various modules (menu, automap,
     *  renderer etc.) get to manipulate at the pixel
     *  level. To go beyond 8 bit displays, these must be extended */ 
    protected V[]         screens;  
     
    //MAES: maybe this should be a bbox?

    public BBox             dirtybox=new BBox();
    
    /** Colormaps are now part of the base software renderer. This 
     *  allows some flexibility over manipulating them.
     *  
     *  Use base as immutable, use work for applying effects.
     *  
     */
    
    protected V[] cmap_base,cmap_work;
    
    /** PLAYPAL-read palettes, used to build dynamic color maps 
     *  Use [z*maxpalettes+y] form, where z=gamme, y=palette
     * */
    
    protected int[][] palettes;
    
    
    public SoftwareVideoRenderer(){
        // Defaults
        width=SCREENWIDTH;
        height=SCREENHEIGHT;
    }

    public SoftwareVideoRenderer(int w,int h){
        // Defaults
        width=w;
        height=h;
    }
    
    protected int  usegamma=0;
    protected int  usepalette=0;
    protected int maxpalettes;
    protected int maxgammas;
    protected int currentpal;
    protected int currentgamma;
    protected int usescreen=0;
    
    public final int getUsegamma() {
        return usegamma;
    }
    
    /** V_Markrect:
     *  Apparently, video.c had its own "dirtybox" bbox, and this was a crude method for 
     *  expanding it.
     * 
     */
    
    public final void MarkRect ( int      x,  int     y,  int     width,  int     height ) 
  